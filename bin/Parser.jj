/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = false;
  //  DEBUG_PARSER= true;
  //  LOOKAHEAD = 2;
  //  FORCE_LA_CHECK = true;
  //  DEBUG_LOOKAHEAD = true;
  //DEBUG_TOKEN_MANAGER = true;
  //CHOICE_AMBIGUITY_CHECK = 3;
}

PARSER_BEGIN(MeinParser)
import java.io.FileReader;
import java.io.File;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.util.*;
import java.util.Queue;
import java.util.LinkedList;

public class MeinParser
{
  // static Stack argStack = new Stack();
  static Queue < String > argStack = new LinkedList < String > ();

  static HashMap < String, String > inputVarsMap = new HashMap < String, String > ();

  static HashMap < String, String > variablesMap = new HashMap < String, String > ();

  static HashMap < String, String > tempVarsMap = new HashMap < String, String > ();

  static HashMap < String, String > tempVarsMap2 = new HashMap < String, String > ();

  static HashMap < String, String > markerMap = new HashMap < String, String > ();

  static ArrayList < String > variableList = new ArrayList < String > ();

  static int zeileNummer = 0;

  static StringBuffer code = new StringBuffer();

  static int varsNum = 1;

  static boolean label = false; //false, true

  public static void main(String args []) throws Exception
  {
    FileReader reader = new FileReader("./praktium/test2.txt");
    MeinParser meinParser = new MeinParser(reader);
    //meinParser.vars();
    //meinParser.assignment();
    //meinParser.whileStmnt();
    meinParser.program();
    meinParser.wrieteFile(code.toString());
  }

  public void wrieteFile(String str) throws Exception
  {
    File writename = new File("./praktium/code.txt");
    writename.createNewFile();
    BufferedWriter out = new BufferedWriter(new FileWriter(writename));
    out.write(str);
    out.flush();
    out.close();
  }

  public void createVars(String image)
  {
    System.out.println(";"+image+" zu "+"R" + varsNum+",");
    inputVarsMap.put(image, "R" + varsNum++);
	
    variablesMap.put(image, "R" + varsNum++);
    tempVarsMap.put(image, "R" + varsNum++);
    tempVarsMap2.put(image, "R" + varsNum++);
    varsNum++;
  }

  public void createCopyBefehle(StringBuffer s, String var)
  {
    label(s);
    s.append(variablesMap.get(token.image) + " = 0 ;COPY (" + variablesMap.get(var) + "," + inputVarsMap.get(var) + ")  \n");
    label(s);
    markerMap.put("ersteAnfangMake", "" + zeileNummer);
    s.append("if " + inputVarsMap.get(var) + " == 0 goto " + (zeileNummer + 4) + "\n");
    label(s);
    s.append(inputVarsMap.get(token.image) + "--\n");
    label(s);
    s.append(tempVarsMap.get(token.image) + "++\n");
    label(s);
    s.append("goto " + markerMap.get("ersteAnfangMake") + "\n");
    label(s);
    markerMap.put("ersteAnfangMake2", "" + zeileNummer);
    s.append("if " + tempVarsMap.get(var) + " == 0 goto " + (zeileNummer + 5) + "\n");
    label(s);
    s.append(tempVarsMap.get(var) + "--\n");
    label(s);
    s.append(variablesMap.get(var) + "++\n");
    label(s);
    s.append(inputVarsMap.get(var) + "++\n");
    label(s);
    s.append("goto " + markerMap.get("ersteAnfangMake2") + "\n");
  }

  public void label(StringBuffer s)
  {
    zeileNummer++;
    if (label) s.append(zeileNummer + ":");
  }

  public void zuweizungBefehle(StringBuffer s, String var1, String var)
  {
    label(s);
    s.append(tempVarsMap2.get(var) + " = 0 ;COPY (" + tempVarsMap2.get(var) + "," + inputVarsMap.get(var) + ")  \n");
    label(s);
    markerMap.put("ersteAnfangMake", "" + zeileNummer);
    s.append("if " + inputVarsMap.get(var) + " == 0 goto " + (zeileNummer + 4) + "\n");
    label(s);
    s.append(inputVarsMap.get(var) + "--\n");
    label(s);
    s.append(tempVarsMap.get(var) + "++\n");
    label(s);
    s.append("goto " + markerMap.get("ersteAnfangMake") + "\n");
    label(s);
    markerMap.put("ersteAnfangMake2", "" + zeileNummer);
    s.append("if " + tempVarsMap.get(var) + " == 0 goto " + (zeileNummer + 5) + "\n");
    label(s);
    s.append(tempVarsMap.get(var) + "--\n");
    label(s);
    s.append(tempVarsMap2.get(var) + "++\n");
    label(s);
    s.append(inputVarsMap.get(var) + "++\n");
    label(s);
    s.append("goto " + markerMap.get("ersteAnfangMake2") + "\n");
    label(s);
    s.append(tempVarsMap2.get(var) + "++\n");
    label(s);
    s.append(inputVarsMap.get(var1) + "=0\n");
    label(s);
    markerMap.put("anweizungAnfangMake", zeileNummer + "");
    s.append("if " + tempVarsMap2.get(var) + " == 0 goto " + (zeileNummer + 4) + "\n");
    label(s);
    s.append(tempVarsMap2.get(var) + "--" + "\n");
    label(s);
    s.append(inputVarsMap.get(var1) + "++" + "\n");
    label(s);
    s.append("goto " + markerMap.get("anweizungAnfangMake") + "\n");
  }
}

PARSER_END(MeinParser)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /* OPERATORS */
{
  < WHILE : "while" >
| < DO : "do" >
| < BEGIN : "begin" >
| < END : "end" >
| < IN : "in" >
| < OUT : "out" >
| < VAR : "var" >
| < ZERO : "0" >
| < EINS : "1" >
| < IDENT : [ "a"-"z", "A"-"Z" ] ([ "a"-"z", "A"-"Z", "0"-"9" ])* >
| < ASSIGN : "=" >
| < PLUS : "+" >
| < NOTEQUAL : "!=" >
| < KOMMA : "," >
| < LRUNDKLAMMER : "(" >
| < RRUNDKLAMMER : ")" >
| < SEMIKOLEN : ";" >
}

void input() :
{
}
{
  < IN > < IDENT >
  {
    this.variableList.add(token.image);
    createVars(token.image);
  }
  (
    < KOMMA > < IDENT >
    {
      this.variableList.add(token.image);
      createVars(token.image);
    }
  )*
  {
    System.out.println("Ein gueltiges Input!");
  }
}

void output() :
{
}
{
  < OUT > < IDENT >
  {
    createVars(token.image);
  }
  {
    System.out.println("Ein gueltiges output!");
  }
}

void vars() :
{
}
{
  < VAR > < LRUNDKLAMMER > < IDENT >
  {
    createVars(token.image);
  }
  (
    < KOMMA > < IDENT >
    {
      createVars(token.image);
    }
  )*
  < RRUNDKLAMMER >
  {
    System.out.println("Ein gueltiges vars!");
  }
}

void condition(StringBuffer s) :
{
}
{
  < IDENT >
  {
    createCopyBefehle(s, token.image);
  }
  < NOTEQUAL > 
  < IDENT >
  {
    createCopyBefehle(s, token.image);
  }
  {
    System.out.println("Ein gueltiges condition!");
  }
}

String statement() :
{
  String s = null;
}
{
  (
    s = whileStmnt() 
  | 
    s = assignment()
  )
  (
    {
      String s1 = null;
    }
    < SEMIKOLEN > s1 = statement()
    {
      s = s + "" + s1;
    }
  )?
  {
    //    System.out.println("--Ein gueltiges statement!");
    //    System.out.println(s);
    //    System.out.println("++Ein gueltiges statement!");
    return s;
  }
}

String whileStmnt() :
{
  StringBuffer s = new StringBuffer();
  String statement = null;
}
{
  < WHILE > 
  condition(s) < DO > 
  < BEGIN >
  {
    label(s);
    markerMap.put("AnfangWhileStmnt", "" + zeileNummer);
    s.append("if " + variablesMap.get(this.variableList.get(0)) + "==0 goto " + (zeileNummer + 5) + "\n");
    label(s);
    s.append("if " + variablesMap.get(this.variableList.get(1)) + "==0 goto " + (zeileNummer + 5) + "\n");
    label(s);
    s.append(variablesMap.get(this.variableList.get(0)) + "--\n");
    label(s);
    s.append(variablesMap.get(this.variableList.get(1)) + "--\n");
    label(s);
    s.append("goto " + markerMap.get("AnfangWhileStmnt") + "\n");
    label(s);
    s.append("if " + variablesMap.get(this.variableList.get(1)) + "==0 goto StatementEndLabel \n");
  }
  statement = statement()
  {
    s.append(statement);
  }
  < END >
  {
    label(s);
    s.append("goto 1\n");
    s = new StringBuffer(s.toString().replace("StatementEndLabel", (zeileNummer + 1) + ""));
    //    System.out.println("----whileStmnt!----");
    //    System.out.println(s);
    //    System.out.println("++++whileStmnt!++++");
    return s.toString();
  }
}

String assignment() :
{
  StringBuffer s = new StringBuffer();
}
{
  < IDENT >
  {
    String var1 = token.image;
    label(s);
    s.append("" + inputVarsMap.get(var1));
  }
  < ASSIGN >
  {
    s.append("=");
  }
  (
    < ZERO >
    {
      s.append("0\n");
    }
  | < IDENT >
    {
      String var2 = token.image;
      s = new StringBuffer();
      if (var1.equals(var2))
      {
        zeileNummer--;
        label(s);
        s.append("" + inputVarsMap.get(var1) + "++\n");
      }
      else
      {
        zeileNummer--;
        zuweizungBefehle(s, var1, var2);
      }
    }
    < PLUS > 
    < EINS >
  )
  {
    //    System.out.println("----------assignment----------");
    //    System.out.println(s);
    //    System.out.println("++++++++++assignment++++++++++");
    return s.toString();
  }
}

void program() :
{
  String s = "";
}
{
  < IDENT > < LRUNDKLAMMER > input() < SEMIKOLEN > output() < RRUNDKLAMMER > vars() < SEMIKOLEN > s = statement()
  {
    code.append(s);
  }
  < EOF >
}
