/* Generated By:JavaCC: Do not edit this line. MeinParser.java */
import java.io.FileReader;
import java.io.File;
import java.io.BufferedWriter;
import java.io.FileWriter;

public class MeinParser implements MeinParserConstants {
  public static void main(String args []) throws Exception
  {
    FileReader reader = new FileReader("./praktium/test1.txt");

    MeinParser meinParser = new MeinParser(reader);

        //meinParser.vars();
        //meinParser.assignment();
        //meinParser.whileStmnt();

        meinParser.program();

        meinParser.wrieteFile("\u76f8\u5bf9\u8def\u5f84\uff0c\u5982\u679c\u6ca1\u6709\u5219\u8981\u5efa\u7acb\u4e00\u4e2a\u65b0\u7684output\u3002txt\u6587\u4ef6");
  }

  public void wrieteFile(String str) throws Exception{

        File writename = new File("./praktium/code.txt");
        writename.createNewFile();
        BufferedWriter out = new BufferedWriter(new FileWriter(writename));
        out.write(str);
        out.flush();
        out.close();
  }

  final public void program() throws ParseException {
    jj_consume_token(IDENT);
    jj_consume_token(LRUNDKLAMMER);
    input();
    jj_consume_token(SEMIKOLEN);
    output();
    jj_consume_token(RRUNDKLAMMER);
    vars();
    jj_consume_token(SEMIKOLEN);
    statement();
    jj_consume_token(0);
 System.out.println("Ein gu\u0308ltiges program!");
  }

  final public void input() throws ParseException {
    jj_consume_token(IN);
    jj_consume_token(IDENT);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KOMMA:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(KOMMA);
      jj_consume_token(IDENT);
    }
 System.out.println("Ein gu\u0308ltiges Input!");
  }

  final public void output() throws ParseException {
    jj_consume_token(OUT);
    jj_consume_token(IDENT);
 System.out.println("Ein gu\u0308ltiges output!");
  }

  final public void vars() throws ParseException {
    jj_consume_token(VAR);
    jj_consume_token(LRUNDKLAMMER);
    jj_consume_token(IDENT);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case KOMMA:
        ;
        break;
      default:
        jj_la1[1] = jj_gen;
        break label_2;
      }
      jj_consume_token(KOMMA);
      jj_consume_token(IDENT);
    }
    jj_consume_token(RRUNDKLAMMER);
 System.out.println("Ein gu\u0308ltiges vars!");
  }

  final public void condition() throws ParseException {
    jj_consume_token(IDENT);
    jj_consume_token(NOTEQUAL);
    jj_consume_token(IDENT);
 System.out.println("Ein gu\u0308ltiges condition!");
  }

  final public void assignment() throws ParseException {
    jj_consume_token(IDENT);
    jj_consume_token(ASSIGN);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ZERO:
      jj_consume_token(ZERO);
      break;
    case IDENT:
      jj_consume_token(IDENT);
      jj_consume_token(PLUS);
      jj_consume_token(EINS);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
 System.out.println("Ein gu\u0308ltiges assignment!");
  }

  final public void statement() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENT:
      assignment();
      break;
    case WHILE:
      whileStmnt();
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case SEMIKOLEN:
      jj_consume_token(SEMIKOLEN);
      statement();
      break;
    default:
      jj_la1[4] = jj_gen;
      ;
    }
 System.out.println("Ein gu\u0308ltiges statement!");
  }

  final public void whileStmnt() throws ParseException {
    jj_consume_token(WHILE);
    condition();
    jj_consume_token(DO);
    jj_consume_token(BEGIN);
    statement();
    jj_consume_token(END);
 System.out.println("Ein gu\u0308ltiges whileStmnt!");
  }

  /** Generated Token Manager. */
  public MeinParserTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[5];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x40000,0x40000,0x5000,0x4020,0x200000,};
   }

  /** Constructor with InputStream. */
  public MeinParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MeinParser(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MeinParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MeinParser(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MeinParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MeinParser(MeinParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MeinParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 5; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[22];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 5; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 22; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
