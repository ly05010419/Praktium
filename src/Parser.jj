/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = false;
  //  DEBUG_PARSER= true;
  //  LOOKAHEAD = 2;
  //  FORCE_LA_CHECK = true;
  //  DEBUG_LOOKAHEAD = true;
  //DEBUG_TOKEN_MANAGER = true;
  //CHOICE_AMBIGUITY_CHECK = 3;
}

PARSER_BEGIN(MeinParser)
import java.io.FileReader;
import java.io.File;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.util.*;
import java.util.Queue;
import java.util.LinkedList;

public class MeinParser
{
  // static Stack argStack = new Stack();
  static Queue < String > argStack = new LinkedList < String > ();

  static HashMap < String, String > registerAbbildung = new HashMap < String, String > ();

  static HashMap < String, String > variablesMap = new HashMap < String, String > ();

  static HashMap < String, String > tempVarsMap = new HashMap < String, String > ();

  static HashMap < String, String > tempVarsMap2 = new HashMap < String, String > ();

  static int zeileNummer = 0;

  static StringBuffer code = new StringBuffer();

  static int varsNum = 1;

  static boolean label = false; //false, true

  public static void main(String args []) throws Exception
  {
    FileReader reader = new FileReader("./praktium/test2.txt");
    MeinParser meinParser = new MeinParser(reader);
    //meinParser.vars();
    //meinParser.assignment();
    //meinParser.whileStmnt();
    meinParser.program();
    meinParser.wrieteFile(code.toString());
  }

  public void wrieteFile(String str) throws Exception
  {
    File writename = new File("./praktium/code.txt");
    writename.createNewFile();
    BufferedWriter out = new BufferedWriter(new FileWriter(writename));
    out.write(str);
    out.flush();
    out.close();
  }

  public void createVars(String image) throws VariableException
  {
    if(image==null) {
		throw new VariableException("varialble ist Null");
     }
 
     
        if(registerAbbildung.containsKey(image)) {
throw new VariableException(image+" ist schon da");
       }

       


    System.out.println(""+image+" zu "+"R" + varsNum+",");
    registerAbbildung.put(image, "R" + varsNum++);
  }

public String getVars(String image) throws VariableException {
     if(registerAbbildung.get(image)==null) {
		throw new VariableException("varialble ist Null");
       }
       
return getVars(image);
  }

   public void createHilfsVars()
  {
   for (Iterator<String> iter = registerAbbildung.keySet().iterator(); iter.hasNext(); ) {
    	String key = iter.next(); 
    	variablesMap.put(key, "R" + varsNum++);
    	tempVarsMap.put(key, "R" + varsNum++);
    	tempVarsMap2.put(key, "R" + varsNum++);
  	}
  }

  public void createCopyBefehle(StringBuffer s, String var)  throws VariableException
  {
     if(var==null) {
		throw new VariableException("varialble ist Null");
     }
    label(s);
    s.append(variablesMap.get(var) + " = 0							;COPY (" + variablesMap.get(var) + "," + getVars(var) + ")  \n");
    label(s);
    String ersteAnfangMake = zeileNummer+"";
    
    s.append("if " + getVars(var) + " == 0 goto " + (zeileNummer + 4) + "\n");
    label(s);
    s.append(getVars(var) + "--\n");
    label(s);
    s.append(tempVarsMap.get(var) + "++\n");
    label(s);
    s.append("goto " + ersteAnfangMake + "\n");
    label(s);
    
    String ersteAnfangMake2 = zeileNummer+"";
    s.append("if " + tempVarsMap.get(var) + " == 0 goto " + (zeileNummer + 5) + "\n");
    label(s);
    s.append(tempVarsMap.get(var) + "--\n");
    label(s);
    s.append(variablesMap.get(var) + "++\n");
    label(s);
    s.append(getVars(var) + "++\n");
    label(s);
    s.append("goto " + ersteAnfangMake2 + "							;COPY (" + variablesMap.get(var) + "," + getVars(var) + ")  \n");
  }

  public void label(StringBuffer s)
  {
    zeileNummer++;
    if (label) s.append(zeileNummer + ":");
  }

  public void zuweizungBefehle(StringBuffer s, String dest, String var)  throws VariableException
  {
    if(var==null || dest == null) { 
		throw new VariableException("varialble ist Null");
     }
    label(s);
    s.append(tempVarsMap2.get(var) + " = 0 							;Zuweizung:(" + getVars(dest) + "=" + getVars(var) + "+1) COPY (" + tempVarsMap2.get(var) + "," + getVars(var) + ")  \n");
    label(s);
    
    String ersteAnfangMake = zeileNummer+"";
    
    s.append("if " + getVars(var) + " == 0 goto " + (zeileNummer + 4) + "\n");
    label(s);
    s.append(getVars(var) + "--\n");
    label(s);
    s.append(tempVarsMap.get(var) + "++\n");
    label(s);
    s.append("goto " + ersteAnfangMake + "\n");
    label(s);
    
    String ersteAnfangMake2 = zeileNummer+"";
    
    s.append("if " + tempVarsMap.get(var) + " == 0 goto " + (zeileNummer + 5) + "\n");
    label(s);
    s.append(tempVarsMap.get(var) + "--\n");
    label(s);
    s.append(tempVarsMap2.get(var) + "++\n");
    label(s);
    s.append(getVars(var) + "++\n");
    label(s);
    s.append("goto " + ersteAnfangMake2 + "							;Zuweizung: (" + getVars(dest) + "=" + getVars(var) + "+1) COPY (" + tempVarsMap2.get(var) + "," + getVars(var) + ")  \n");
    label(s);
    s.append(tempVarsMap2.get(var) + "++							;Zuweizung: (" + getVars(dest) + "=" + getVars(var) + "+1)  \n");
    label(s);
    s.append(getVars(dest) + "=0\n");
    label(s);
    
    String anweizungAnfangMake = zeileNummer+"";
    
    s.append("if " + tempVarsMap2.get(var) + " == 0 goto " + (zeileNummer + 4) + "\n");
    label(s);
    s.append(tempVarsMap2.get(var) + "--" + "\n");
    label(s);
    s.append(getVars(dest) + "++" + "\n");
    label(s);
    s.append("goto " + anweizungAnfangMake +  "							;Zuweizung: (" + getVars(dest) + "=" + getVars(var) + "+1)  \n");
  }
}

PARSER_END(MeinParser)

SKIP :
{
  " "
| "\r"
| "\t"
| "\n"
}

TOKEN : /* OPERATORS */
{
  < WHILE : "while" >
| < DO : "do" >
| < BEGIN : "begin" >
| < END : "end" >
| < IN : "in" >
| < OUT : "out" >
| < VAR : "var" >
| < ZERO : "0" >
| < EINS : "1" >
| < IDENT : [ "a"-"z", "A"-"Z" ] ([ "a"-"z", "A"-"Z", "0"-"9" ])* >
| < ASSIGN : "=" >
| < PLUS : "+" >
| < NOTEQUAL : "!=" >
| < KOMMA : "," >
| < LRUNDKLAMMER : "(" >
| < RRUNDKLAMMER : ")" >
| < SEMIKOLEN : ";" >
}

void input() :
{
}
{
  < IN > < IDENT >
  {
    createVars(token.image);
  }
  (
    < KOMMA > < IDENT >
    {
      createVars(token.image);
    }
  )*
  {
  }
}

void output() :
{
}
{
  < OUT > < IDENT >
  {
    createVars(token.image);
  }
  {
  }
}

void vars() :
{
}
{
  < VAR > < LRUNDKLAMMER > < IDENT >
  {
    createVars(token.image);
  }
  (
    < KOMMA > < IDENT >
    {
      createVars(token.image);
    }
  )*
  < RRUNDKLAMMER >
  {
//    System.out.println("Ein gueltiges vars!");
  }
}

ArrayList < String > condition(StringBuffer s) :
{
  ArrayList < String > variableList = new ArrayList < String > ();
}
{
  < IDENT >
  {
    variableList.add(token.image);
  }
  < NOTEQUAL > 
  < IDENT >
  {
    variableList.add(token.image);
  }
  {
	return variableList;
  }
}

String statement() :
{
  String s = null;
}
{
  (
    s = whileStmnt() 
  | 
    s = assignment()
  )
  (
    {
      String s1 = null;
    }
    < SEMIKOLEN > s1 = statement()
    {
      s = s + "" + s1;
    }
  )?
  {
    //    System.out.println(s);
    return s;
  }
}

String whileStmnt() :
{
  StringBuffer s = new StringBuffer();
  String statement = null;
  ArrayList < String > variableList = null;
  String anfangWhile = (zeileNummer+1)+"";
}
{
  < WHILE > 
  variableList = condition(s) < DO > 
  < BEGIN >
  {
    
	for(String var : variableList) { 
    	createCopyBefehle(s, var);
 	 }
    label(s);
    String anfangWhileStmnt = (zeileNummer)+"";
    s.append("if " + variablesMap.get(variableList.get(0)) + "==0 goto " + (zeileNummer + 5) + "				;while "+variablesMap.get(variableList.get(0))+"!="+variablesMap.get(variableList.get(1))+" do begin  \n");
    label(s);
    s.append("if " + variablesMap.get(variableList.get(1)) + "==0 goto " + (zeileNummer + 5) + "\n");
    label(s);
    s.append(variablesMap.get(variableList.get(0)) + "--\n");
    label(s);
    s.append(variablesMap.get(variableList.get(1)) + "--\n");
    label(s);
    s.append("goto " + anfangWhileStmnt + "\n");
    label(s);
    s.append("if " + variablesMap.get(variableList.get(1)) + "==0 goto StatementEndLabel 				;while "+variablesMap.get(variableList.get(0))+"!="+variablesMap.get(variableList.get(1))+" do begin  \n");
  }
  statement = statement()
  {
    s.append(statement);
  }
  < END >
  {
    label(s);
    s.append("goto "+anfangWhile+"\n");
    
    s = new StringBuffer(s.toString().replace("StatementEndLabel", (zeileNummer + 1) + ""));
//    System.out.println(s);
    return s.toString();
  }
}

String assignment() :
{
  StringBuffer s = new StringBuffer();
}
{
  < IDENT >
  {
    String var1 = token.image;
    label(s);
    s.append("" + getVars(var1));
  }
  < ASSIGN >
  {
    s.append("=");
  }
  (
    < ZERO >
    {
      s.append("0							;Zuweisung: ("+getVars(var1)+"=0) \n");
    }
  | < IDENT >
    {
      String var2 = token.image;
      s = new StringBuffer();
      if (var1.equals(var2))
      {
        zeileNummer--;
        label(s);
        s.append("" + getVars(var1) + "++							;Zuweisung: ("+getVars(var1)+"="+getVars(var1)+"+1) \n");
      }
      else
      {
        zeileNummer--;
        zuweizungBefehle(s, var1, var2);
      }
    }
    < PLUS > 
    < EINS >
  )
  {
    //    System.out.println(s);
    return s.toString();
  }
}

void program() :
{
  String s = "";
}
{
  < IDENT > < LRUNDKLAMMER > input() < SEMIKOLEN > output() < RRUNDKLAMMER > vars() {createHilfsVars(); } < SEMIKOLEN > s = statement()
  {
    code.append(s);
  }
  < EOF >
}
